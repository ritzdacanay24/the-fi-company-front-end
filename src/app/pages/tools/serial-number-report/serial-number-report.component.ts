import { Component, OnInit } from '@angular/core';
import { SharedModule } from '@app/shared/shared.module';
import { SerialNumberService, GeneratedSerialNumber, SerialNumberTemplate } from '@app/core/services/serial-number.service';
import { ToastrService } from 'ngx-toastr';
import { NgxBarcode6Module } from 'ngx-barcode6';
import { AgGridModule } from 'ag-grid-angular';
import { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';

@Component({
  standalone: true,
  imports: [SharedModule, NgxBarcode6Module, AgGridModule],
  selector: 'app-serial-number-report',
  templateUrl: './serial-number-report.component.html',
  styleUrls: ['./serial-number-report.component.scss']
})
export class SerialNumberReportComponent implements OnInit {
  
  // Grid configuration
  columnDefs: ColDef[] = [
    {
      headerName: 'Serial Number',
      field: 'serial_number',
      width: 200,
      pinned: 'left',
      cellRenderer: (params: any) => {
        return `<span class="font-monospace">${params.value}</span>`;
      }
    },
    {
      headerName: 'Template',
      field: 'template_name',
      width: 150
    },
    {
      headerName: 'Used For',
      field: 'used_for',
      width: 120,
      cellRenderer: (params: any) => {
        const badges: { [key: string]: string } = {
          'product': 'bg-primary',
          'asset': 'bg-info',
          'work_order': 'bg-warning',
          'transaction': 'bg-success',
          'demo': 'bg-secondary'
        };
        const badgeClass = badges[params.value] || 'bg-light';
        return `<span class="badge ${badgeClass}">${params.value}</span>`;
      }
    },
    {
      headerName: 'Status',
      field: 'status',
      width: 100,
      cellRenderer: (params: any) => {
        const isUsed = params.data.is_used;
        return isUsed 
          ? '<span class="badge bg-success">Used</span>'
          : '<span class="badge bg-warning">Available</span>';
      }
    },
    {
      headerName: 'Generated By',
      field: 'generated_by',
      width: 120
    },
    {
      headerName: 'Generated At',
      field: 'generated_at',
      width: 160,
      cellRenderer: (params: any) => {
        return new Date(params.value).toLocaleString();
      }
    },
    {
      headerName: 'Used At',
      field: 'used_at',
      width: 160,
      cellRenderer: (params: any) => {
        return params.value ? new Date(params.value).toLocaleString() : '-';
      }
    },
    {
      headerName: 'Reference',
      field: 'reference_id',
      width: 150,
      cellRenderer: (params: any) => {
        if (params.value && params.data.reference_table) {
          return `${params.data.reference_table}: ${params.value}`;
        }
        return '-';
      }
    },
    {
      headerName: 'Actions',
      width: 120,
      cellRenderer: (params: any) => {
        const serialNumber = params.data.serial_number;
        const isUsed = params.data.is_used;
        
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'btn-group btn-group-sm';
        
        // Barcode button
        const barcodeBtn = document.createElement('button');
        barcodeBtn.className = 'btn btn-outline-primary btn-sm';
        barcodeBtn.innerHTML = '<i class="mdi mdi-barcode"></i>';
        barcodeBtn.title = 'Show Barcode';
        barcodeBtn.onclick = () => this.showBarcode(serialNumber);
        buttonContainer.appendChild(barcodeBtn);
        
        // Copy button
        const copyBtn = document.createElement('button');
        copyBtn.className = 'btn btn-outline-secondary btn-sm';
        copyBtn.innerHTML = '<i class="mdi mdi-content-copy"></i>';
        copyBtn.title = 'Copy';
        copyBtn.onclick = () => this.copyToClipboard(serialNumber);
        buttonContainer.appendChild(copyBtn);
        
        // Mark as used button (only if not used)
        if (!isUsed) {
          const useBtn = document.createElement('button');
          useBtn.className = 'btn btn-outline-success btn-sm';
          useBtn.innerHTML = '<i class="mdi mdi-check"></i>';
          useBtn.title = 'Mark as Used';
          useBtn.onclick = () => this.markAsUsed(serialNumber);
          buttonContainer.appendChild(useBtn);
        }
        
        return buttonContainer;
      },
      pinned: 'right'
    }
  ];

  gridApi!: GridApi;
  serialNumbers: GeneratedSerialNumber[] = [];
  templates: SerialNumberTemplate[] = [];
  selectedBarcodeSerial: string = '';
  showBarcodeModal: boolean = false;
  
  // Filters
  selectedTemplate: string = '';
  selectedUsedFor: string = '';
  selectedStatus: string = '';
  dateFrom: string = '';
  dateTo: string = '';

  // Stats
  totalCount: number = 0;
  usedCount: number = 0;
  availableCount: number = 0;

  constructor(
    private serialNumberService: SerialNumberService,
    private toastrService: ToastrService
  ) {}

  ngOnInit() {
    this.loadTemplates();
    this.loadSerialNumbers();
  }

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    this.gridApi.sizeColumnsToFit();
  }

  loadTemplates() {
    this.serialNumberService.getTemplates().subscribe({
      next: (response) => {
        if (response.success) {
          this.templates = response.data;
        }
      },
      error: (error) => {
        console.error('Error loading templates:', error);
      }
    });
  }

  loadSerialNumbers() {
    this.serialNumberService.getSerialHistory(1000, this.selectedTemplate, this.selectedUsedFor).subscribe({
      next: (response) => {
        if (response.success) {
          this.serialNumbers = response.data;
          this.updateStats();
        } else {
          this.toastrService.error('Failed to load serial numbers: ' + response.message);
        }
      },
      error: (error) => {
        console.error('Error loading serial numbers:', error);
        this.toastrService.error('Error loading serial numbers');
      }
    });
  }

  updateStats() {
    this.totalCount = this.serialNumbers.length;
    this.usedCount = this.serialNumbers.filter(s => s.is_used).length;
    this.availableCount = this.totalCount - this.usedCount;
  }

  applyFilters() {
    this.loadSerialNumbers();
  }

  clearFilters() {
    this.selectedTemplate = '';
    this.selectedUsedFor = '';
    this.selectedStatus = '';
    this.dateFrom = '';
    this.dateTo = '';
    this.loadSerialNumbers();
  }

  exportToCSV() {
    if (this.gridApi) {
      this.gridApi.exportDataAsCsv({
        fileName: `serial-numbers-${new Date().toISOString().split('T')[0]}.csv`
      });
    }
  }

  showBarcode(serialNumber: string) {
    this.selectedBarcodeSerial = serialNumber;
    this.showBarcodeModal = true;
  }

  hideBarcode() {
    this.showBarcodeModal = false;
    this.selectedBarcodeSerial = '';
  }

  copyToClipboard(text: string) {
    navigator.clipboard.writeText(text).then(() => {
      this.toastrService.success('Copied to clipboard');
    });
  }

  markAsUsed(serialNumber: string) {
    const referenceId = prompt('Enter reference ID:');
    const referenceTable = prompt('Enter reference table/system:');
    
    if (referenceId && referenceTable) {
      this.serialNumberService.useSerial(serialNumber, referenceId, referenceTable).subscribe({
        next: (response) => {
          if (response.success) {
            this.toastrService.success('Serial number marked as used');
            this.loadSerialNumbers();
          } else {
            this.toastrService.error('Failed to mark as used: ' + response.message);
          }
        },
        error: (error) => {
          console.error('Error marking as used:', error);
          this.toastrService.error('Error marking serial number as used');
        }
      });
    }
  }

  // Grid cell renderers
  actionsRenderer = (params: any) => {
    const serialNumber = params.data.serial_number;
    const isUsed = params.data.is_used;
    
    return `
      <div class="btn-group btn-group-sm">
        <button class="btn btn-outline-primary btn-sm" onclick="component.showBarcode('${serialNumber}')" title="Show Barcode">
          <i class="mdi mdi-barcode"></i>
        </button>
        <button class="btn btn-outline-secondary btn-sm" onclick="component.copyToClipboard('${serialNumber}')" title="Copy">
          <i class="mdi mdi-content-copy"></i>
        </button>
        ${!isUsed ? `<button class="btn btn-outline-success btn-sm" onclick="component.markAsUsed('${serialNumber}')" title="Mark as Used">
          <i class="mdi mdi-check"></i>
        </button>` : ''}
      </div>
    `;
  };
}
